openapi: 3.0.3
info:
  title: Sina Gerard API
  version: 1.0.0
  description: Sina Gerard Api Full Documentation
paths:
  /api/token/:
    post:
      operationId: api_token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: api_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/token/verify/:
    post:
      operationId: api_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /auth/login:
    post:
      operationId: auth_login_create
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /auth/logout:
    post:
      operationId: auth_logout_create
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /auth/profile:
    get:
      operationId: auth_profile_retrieve
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    put:
      operationId: auth_profile_update
      description: Partially update user profile fields
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    patch:
      operationId: auth_profile_partial_update
      description: Change user password without using a serializer
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /auth/register:
    get:
      operationId: auth_register_retrieve
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: auth_register_create
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /auth/reset-password:
    get:
      operationId: auth_reset_password_retrieve
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: auth_reset_password_create
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /auth/reset-password-confirm:
    post:
      operationId: auth_reset_password_confirm_create
      tags:
      - auth
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /messages/:
    get:
      operationId: messages_retrieve
      description: Retrieve all messages in a chat room.
      tags:
      - messages
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: messages_create
      description: Send a new message in a chat room.
      tags:
      - messages
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /messages/{chat_room_id}:
    get:
      operationId: messages_retrieve_2
      description: Retrieve all messages in a chat room.
      parameters:
      - in: path
        name: chat_room_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messages
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: messages_create_2
      description: Send a new message in a chat room.
      parameters:
      - in: path
        name: chat_room_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messages
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /messages/faqs:
    get:
      operationId: messages_faqs_retrieve
      tags:
      - messages
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /messages/room/:
    get:
      operationId: messages_room_retrieve
      tags:
      - messages
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: messages_room_create
      description: Ensure each customer has only one support chat room.
      tags:
      - messages
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /messages/room/{chat_room_id}/messages/:
    get:
      operationId: messages_room_messages_retrieve
      description: Retrieve all messages in a chat room.
      parameters:
      - in: path
        name: chat_room_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messages
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: messages_room_messages_create
      description: Send a new message in a chat room.
      parameters:
      - in: path
        name: chat_room_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - messages
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /messages/search-faqs:
    get:
      operationId: messages_search_faqs_retrieve
      tags:
      - messages
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /payments/:
    post:
      operationId: payments_create
      tags:
      - payments
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /payments/paymentCheck/{payment_id}:
    get:
      operationId: payments_paymentCheck_retrieve
      parameters:
      - in: path
        name: payment_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - payments
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /payments/qrscan/:
    post:
      operationId: payments_qrscan_create
      tags:
      - payments
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /payments/webhook:
    post:
      operationId: payments_webhook_create
      tags:
      - payments
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /products/:
    get:
      operationId: products_list
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
          description: ''
    post:
      operationId: products_create
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /products/{id}:
    get:
      operationId: products_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: products_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: products_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: products_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /products/all-orders/:
    get:
      operationId: products_all_orders_list
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          description: ''
  /products/category/:
    get:
      operationId: products_category_retrieve
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /products/category/{category_id}:
    get:
      operationId: products_category_retrieve_2
      parameters:
      - in: path
        name: category_id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          description: No response body
  /products/foodcategory/:
    get:
      operationId: products_foodcategory_list
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodCategory'
          description: ''
    post:
      operationId: products_foodcategory_create
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FoodCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FoodCategory'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodCategory'
          description: ''
  /products/foodcategory/{id}:
    get:
      operationId: products_foodcategory_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodCategory'
          description: ''
    put:
      operationId: products_foodcategory_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/FoodCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FoodCategory'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodCategory'
          description: ''
    patch:
      operationId: products_foodcategory_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFoodCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedFoodCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFoodCategory'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodCategory'
          description: ''
    delete:
      operationId: products_foodcategory_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '204':
          description: No response body
  /products/orders/:
    get:
      operationId: products_orders_retrieve
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: products_orders_create
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          description: No response body
  /products/orders/{id}/:
    get:
      operationId: products_orders_retrieve_2
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    put:
      operationId: products_orders_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Order'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
    patch:
      operationId: products_orders_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        required: true
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrder'
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: ''
  /products/shopcategory/:
    get:
      operationId: products_shopcategory_list
      tags:
      - products
      security:
      - tokenAuth: []
      - cookieAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShopCategory'
          description: ''
    post:
      operationId: products_shopcategory_create
      tags:
      - products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ShopCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ShopCategory'
        required: true
      security:
      - tokenAuth: []
      - cookieAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopCategory'
          description: ''
components:
  schemas:
    Food:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        thumbnail:
          type: string
          format: uri
          nullable: true
        preparation_time:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        created_at:
          type: string
          format: date-time
          readOnly: true
        category:
          type: string
          format: uuid
      required:
      - category
      - created_at
      - id
      - name
      - price
    FoodCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        foods:
          type: array
          items:
            $ref: '#/components/schemas/Food'
          readOnly: true
      required:
      - foods
      - id
      - name
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        order_payment_details:
          allOf:
          - $ref: '#/components/schemas/Payment'
          readOnly: true
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        payment_status:
          $ref: '#/components/schemas/PaymentStatusEnum'
        preparation_time:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        created_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          readOnly: true
        order_payment:
          type: string
          format: uuid
          nullable: true
        products:
          type: array
          items:
            type: string
            format: uuid
        foods:
          type: array
          items:
            type: string
            format: uuid
        accompaniments:
          type: array
          items:
            type: string
            format: uuid
      required:
      - created_at
      - id
      - order_payment_details
      - total_price
      - user
    PatchedFoodCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        foods:
          type: array
          items:
            $ref: '#/components/schemas/Food'
          readOnly: true
    PatchedOrder:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        order_payment_details:
          allOf:
          - $ref: '#/components/schemas/Payment'
          readOnly: true
        total_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          readOnly: true
        payment_status:
          $ref: '#/components/schemas/PaymentStatusEnum'
        preparation_time:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        created_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
          readOnly: true
        order_payment:
          type: string
          format: uuid
          nullable: true
        products:
          type: array
          items:
            type: string
            format: uuid
        foods:
          type: array
          items:
            type: string
            format: uuid
        accompaniments:
          type: array
          items:
            type: string
            format: uuid
    PatchedProduct:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        product_category:
          type: array
          items:
            type: string
            format: uuid
        shop_category:
          type: array
          items:
            type: string
            format: uuid
        possible_accompaniments:
          type: array
          items:
            type: string
            format: uuid
        thumbnail:
          type: string
          format: uri
        is_pick_and_go:
          type: boolean
        delivery_time:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: Time in minutes
        preparation_time:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        created_at:
          type: string
          format: date-time
          readOnly: true
    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        ref:
          type: string
          maxLength: 255
        phone_number:
          type: string
          maxLength: 15
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        status:
          $ref: '#/components/schemas/StatusEnum'
        qr_code:
          type: string
          format: uri
          nullable: true
        is_scanned:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        customer:
          type: integer
      required:
      - amount
      - created_at
      - customer
      - id
      - phone_number
      - ref
      - status
    PaymentStatusEnum:
      enum:
      - pending
      - completed
      - failed
      type: string
      description: |-
        * `pending` - Pending
        * `completed` - completed
        * `failed` - failed
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        product_category:
          type: array
          items:
            type: string
            format: uuid
        shop_category:
          type: array
          items:
            type: string
            format: uuid
        possible_accompaniments:
          type: array
          items:
            type: string
            format: uuid
        thumbnail:
          type: string
          format: uri
        is_pick_and_go:
          type: boolean
        delivery_time:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
          nullable: true
          description: Time in minutes
        preparation_time:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - description
      - id
      - name
      - price
      - product_category
      - shop_category
      - thumbnail
    ShopCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 255
        thumbnail:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - thumbnail
      - title
    StatusEnum:
      enum:
      - pending
      - completed
      - failed
      type: string
      description: |-
        * `pending` - Pending
        * `completed` - completed
        * `failed` - Failed
    TokenObtainPair:
      type: object
      properties:
        phone_number:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - phone_number
      - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
